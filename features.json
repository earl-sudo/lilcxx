{
  "organization": [
    {"n": "gihub https://github.com/earl-sudo/lilcxx"},
    {"n": "license open source"}
  ],
  "language": [
    {"n": "Mostly same syntax as Tcl with notable exceptions"},
    {"unlike-tcl": [
      "escapes \\o for { and \\c for }",
      "func command to define subroutines",
      "func has no default values",
      "variable from global are auto imported into subroutines",
      "to create global from inside a subroutine \"set global name value\"",
      "force local variables with local command \"local level; set level 32\"",
      "multi-line comments are between \"##\"",
      "Instead of \"info\" it uses \"reflect\"",
      "Instead of \"puts\" it uses \"print\"",
      "expr command supports (a),-a,+a,~a,!a,a*b,a/b,a\\b,a%b,a+b,a-b,a<<b,a>>b,a<=b,a>=b,a<b,a>b,a==b,a!=b,a&b,a||b,a&&b",
      "expr command a\\b is integer division",
      "exceptions handled by catcher/try/error commands",
      "Assumes that it is run inside a single thread"
    ]},
    {"n": "assign variables with \"set\" command"},
    {"n": "expr command for math calculations"}
  ],
  "cmds": [
    {"n": "append", "tags": "list"},
    {"n": "catcher", "tags": "language exception"},
    {"n": "char", "tags": "string character"},
    {"n": "charat", "tags": "string character"},
    {"n": "codeat", "tags": "string character"},
    {"n": "concat", "tags": "string list"},
    {"n": "dec", "tags": "math"},
    {"n": "downeval", "tags": "language variable"},
    {"n": "enveval", "tags": "language variable"},
    {"n": "error", "tags": "language exception"},
    {"n": "eval", "tags": "language eval"},
    {"n": "exit", "tags": "language"},
    {"n": "expr", "tags": "language math logic expression"},
    {"n": "filter", "tags": "list"},
    {"n": "for", "tags": "language loop"},
    {"n": "foreach", "tags": "language loop"},
    {"n": "func", "tags": "language subroutine"},
    {"n": "if", "tags": "language logic conditional"},
    {"n": "inc", "tags": "math"},
    {"n": "index", "tags": "list"},
    {"n": "indexof", "tags": "list"},
    {"n": "jaileval", "tags": "language variable"},
    {"n": "jaileval", "tags": "list"},
    {"n": "length", "tags": "list string"},
    {"n": "list", "tags": "list"},
    {"n": "lmap", "tags": "list"},
    {"n": "local", "tags": "variable language"},
    {"n": "ltrim", "tags": "string"},
    {"n": "print", "tags": "io console"},
    {"n": "quote", "tags": "string"},
    {"n": "rand", "tags": "math"},
    {"n": "read", "tags": "io file"},
    {"n": "reflect", "tags": "reflect"},
    {"n": "rename", "tags": "variable"},
    {"n": "repstr", "tags": "string"},
    {"n": "result", "tags": "language subroutine"},
    {"n": "return", "tags": "language subroutine"},
    {"n": "rtrim", "tags": "string"},
    {"n": "set", "tags": "language variable"},
    {"n": "slice", "tags": "list"},
    {"n": "source", "tags": "language io file"},
    {"n": "split", "tags": "string list"},
    {"n": "store", "tags": "io file"},
    {"n": "strcmp", "tags": "string"},
    {"n": "streq", "tags": "string"},
    {"n": "strpos", "tags": "string"},
    {"n": "subst", "tags": "string variable"},
    {"n": "substr", "tags": "string"},
    {"n": "topeval", "tags": "language variable"},
    {"n": "trim", "tags": "string"},
    {"n": "try", "tags": "language exception"},
    {"n": "unusedname", "tags": "subroutine utility"},
    {"n": "upeval", "tags": "language variable"},
    {"n": "watch", "tags": "language trace"},
    {"n": "while", "tags": "language loop"}
  ],
  "codefeatures-external": [
    {"n": "lilcxx main which can be used to run scripts of unittest."},
    {"n": "Written to C++20 language"},
    {"n": "No external libraries needed"},
    {"n": "Designed to be portable"},
    {"n": "CMake build"},
    {"n": "build.sh build"},
    {"n": "builds a liblilcxx.a"},
    {"n": "builds a lil executable lilcxxsh"},
    {"n": "srcToC.tcl convert text files to C++ static strings"},
    {"n": "valgrind_all.sh to run valgrind over lilcxx main"},
    {"n": "kcov_all.sh to use kcov to show code coverage"},
    {"n": "narrow_cast.h to build safe narrowing cast"},
    {"n": "string_format.h a better sprintf()"},
    {"n": "MemCache.h cache memory alllocation of objects for speed"},
    {"n": "Has a simple API in lil.h"},
    {"n": "Has a detailed API in lil_inter.h"},
    {"n": "Lowest level functions have mockable interfaces see funcPointers.h"}
  ],
  "codefeatures-objects": [
      {"n": "ErrorCode"},
      {"n": "ObjCounter"},
      {"n": "FuncTimer"},
      {"n": "Coverage"},
      {"n": "SysInfo"},
      {"n": "Lil_value"},
      {"n": "Lil_callframe"},
      {"n": "Lil_list"},
      {"n": "Lil_func"},
      {"n": "Lil_Interp"},
      {"n": "Lil_exprVal"},
      {"n": "Module"},
      {"n": "CommandAdaptor"}
  ],
  "codefeatures-internal": [
    "Counter of instances of objects created, see object ObjCounter",
    "Timer for functions, see object FuncTimer",
    "Coverage for code, see object Coverage",
    "Way to configure interpreters, see object SysInfo",
    "Way to keep stats on interpreters, see object SysInfo",
    "Way to log stats on interpreters, see object SysInfo",
    "Singleton for each thread see Lil_getSysInfo()",
    "Can pre-allocate size of hashtables used",
    "Has group of callbacks to change how various command actual work at run time. see LilInterp.callback_",
    "Can run commands in jails of only the bear min commands, see LilInterp.sysCmdMap and jaileval command",
    "Designed to be easy to port to UTF-16",
    "Allow exceptions in commands to be caught",
    "Has it own exception type",
    "Sub interpreters know their parents",
    "Can remove big strings with LILCXX_NO_HELP_TEXT macro",
    "Commands know their safe or not. See object CommandAdaptor",
    "Commands can know what module they are from see object CommandAdaptor",
    "Commands can know their help text and their command help, see object CommandAdaptor",
    "Commands can know what 'type' (i.e. tag) of command they are, see object CommandAdaptor."
  ]
}