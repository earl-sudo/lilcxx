{
  "errors": [
    {"n": "Fix \"invalid read of size 1\", ~Lil_value()."}
  ],
  "misc": [
    {"n": "safe mode", "rank":  1, "note":  "started"},
    {"n": "Add compile/os/date/commands tested info to log", "rank": 1},
    {"n": "test command & testfunc", "rank": 1},
    {"n": "Operation of Make and unittest more standard for others", "rank": 1},
    {"n": "Connect commands to unittest", "rank": 1},
    {"n": "Get github actions working to test, and package", "rank": 1},
    {"n": "versatile headers and libs", "rank": 1},

    {"n": "optional naming conventions"},
    {"n": "Option to build without exceptions"},
    {"n": "Text operations based on editor, undo/redo"},
    {"n": "API for configuration files"},
    {"n": "API for package files"},
    {"n": "Record build type and compiler arguments"},

    {"n": "RPM and YUM packaging"},
    {"n": "conanfile.py"},
    {"n": "optional 128 bit int calccrypto/uint128_t"},
    {"n": "optional multiprecision"},
    {"n": "Add boost::describe to data structures"},
    {"n": "Shared libraries"},

    {"n": "Make argument error, action error, parser error, null return all distinct in commands.", "rank":  10},
    {"n": "numDeReferences_", "rank": 20},
    {"n": "numRedefinedProcs_", "rank": 20},
    {"n": "numRedefinedVars", "rank": 20},

    {"n": "Add several build options, sanitizers address/leak/undef/thread/memory coverage,time-trace conan/vcpkg.json"},
    {"n": "Use inspectors on code."},
    {"n": "Get rid of Lil_list.listRep_ use of for loops.  Remove getCount() - 80%"},
    {"n": "Lil_list copy ctor, assignment"},
    {"n": "Convert Lil_list to std::list<> and change calling convention to use a "},
    {"n": "std::list<> from C-array."},
    {"n": "justifications"},
    {"n": "ERROR: Copies may exist of LilInterp may exist so other references are possible."},

    {"n": "Review algorithms for substitutions."},
    {"n": "better errors"},
    {"n": "get rid of most \".c_str()\" - 70%"},
    {"n": "make expr code \"re-usable\""},
    {"n": "Cmd error management"},
    {"n": "Make Lil_value more string like."},
    {"n": "redirect stdout stderr"},
    {"n": "Add error ids to all errors"},
    {"n": "Use tcl test suit."},

    {"n": "find limits of current expr."},
    {"n": "Functor version of callbacks. How?"},
    {"n": "\"func\" and \"commands\" attributes"},
    {"n": "    - hidden/namespace/sourceName/numArgFails/numCmdFails/numExceptions/numDefs."},
    {"n": "    - defaultValues/statics"},
    {"n": "coverage analysis"},
    {"n": "test/stress commands"},
    {"n": "put cmd on cmdline"},
    {"n": "line editing", "version2": 1},
    {"n": "history", "version2": 1},

    {"n": "act like terminal \"interruptable\"", "version2": 1},
    {"n": "[] => span<> or array<>", "rank":  100},
    {"n": "C API", "rank": 100 , "version2": 1},
    {"n": "Add more inline documentation.", "rank": 100},
    {"n": "integrate linux cmds al-la system(\"ls\") becomes ls command", "rank": 100},

    {"n": "Convert to UTF-16 characters", "rank": 100, "version2": 1},
    {"n": "Make SysInfo work mostly off callbacks.", "rank": 100},
    {"n": "tclParseNumber project", "rank": 100},
    {"n": "string class", "rank": 100, "version2": 1}
  ],
  "optimizations": [
    {"n": "Object cache", "rank": 1},
    {"n": "Add system to associate binary/alternate representations to string representations and deal with changes."},
    {"n": "configure vectors."},
    {"n": "configure strings name/values/misc"},
    {"n": "cache conditionally int64_t and Lil_value."},
    {"n": "cache conditionally double and Lil_value."},
    {"n": "cache Lil_list and Lil_value."},
    {"n": "string class that detects integer conversion or not float/integer."}
  ],
  "modules": [
    {"n": "C lib functions file/local/math", "version2": 1},
    {"n": "C++ lib functions regexp/random/time/local", "version2": 1},
    {"n": "Posix lib functions", "version2": 1},
    {"n": "boost lib functions ini/json/yaml/xml/zip/tar/cvs", "version2": 1},
    {"n": "C++ filesystem to commands", "version2": 1},
    {"n": "dictionary", "version2": 1}
  ],
  "functions": [
    {"n": "Command help", "rank": 1},
    {"n": "Command arg check", "rank": 1},
    {"n": "Add module support API, addModule, renameModule, listModules", "rank": 1, "version2": 1},
    {"n": "Add resource handles", "rank": 1, "version2": 1},
    {"n": "dbgbreak", "version2": 1},
    {"n": "assert", "version2": 1},
    {"n": "onexitFunc", "version2": 1},
    {"n": "\"test\" command with {script output numErrors} an on/off switch"},
    {"n": "binary [binary 64 be wordalign] [binary $x add {i4 5} pad3] [binary $x get i4 pad3", "version2": 1},

    {"n": "onlyOnce command", "version2": 1},
    {"n": "everyPeriod command", "version2": 1},
    {"n": "static variables", "version2": 1},
    {"n": "\"unless\" cmd args condition", "version2": 1},
    {"n": "\"must cmd\" args -- error becomes exception", "version2": 1}
  ],
  "additions": [
    {"n": "option to log all errors and catches, std::function"},
    {"n": "option to log all calls, std::function"},
    {"n": "log of external changes of commands", "version2": 1},
    {"n": "awk like file ops", "version2": 1},
    {"n": "auto close file/socket on eof", "version2": 1},
    {"n": "Add holding area for functions.", "rank":  1, "version2": 1},
    {"n": "tanted rwx", "version2": 1},
    {"n": "detect environment run in OS, dir, user, permissions", "version2": 1},
    {"n": "Add platform information", "version2": 1},
    {"n": "Better expr (from tcl7.6)", "version2": 1},

    {"n": "Better int/double parsing (from tcl8)", "version2": 1},
    {"n": "Make more like tcl (\"func\" => \"proc\" and like)", "version2": 1},
    {"n": "Output stats as YAML or JSON", "version2": 1},
    {"n": "From Jim borrow - info stacktrce - static vars - command line edition - expression shorthand - defer", "version2": 1},
    {"n": "if/switch/for/foreach/func/while return", "version2": 1},

    {"n": "@count<n> for loops", "version2": 1},
    {"n": "named beak/continue with local flag @break<name>called", "version2": 1},
    {"n": "generators like python/C++", "version2": 1 },
    {"n": "std::string wrapper", "version2": 1},
    {"n": "std::unordered_map wrapper", "version2": 1},
    {"n": "fake Tcl API borrow Tcl commands",
      "notes": [
        {"n": "    binary, env, eof, exec(***), expr, fcopy, file, fileevent, filename, flush, format, "},
        {"n": "gets, glob, http,"},
        {"n": "tell, time, timerate,"},
        {"n": "    clock, vmwait, zlib, sqlite"},
        {"n": "    open, puts, read, regexp, regsub, scan, seek, socket, string, tcl_platform, tcltest, "}
      ] },

    {"n": "from boost dll, integer, xml, json, yaml, csv, tokenizer, python, asio, process, beast, log, circular buffer,", "version2": 1},
    {"n": "from C++  string, random, filesystem, chrono" , "version2": 1},
    {"n": "Add limiting API maxLevelStack, maxScriptSize, maxNumLength, maxValueLen, maxNumArgs, maxNumProcs, maxNumCommands, maxNumValue,", "version2": 1,
      "notes": [
        {"n": "    maxProcSize, maxNumLocals, maxNumLoops, maxExprSize, maxIntegerValue, "},
        {"n": "minIntegerValue, maxDoubleValue, minDoubleValue"},
        {"n": "    cmdsAsGenerated, varsAsGenerated, varsAsWritten, procErrorReturn, missedVars, "},
        {"n": "    procChanges"},
        {"n": "missedCommands, badConversions"}
      ]
    },
    {"n": "Event loop", "version2": 1}
  ],
  "unsorted": [
    {"n": "compress static text", "version2": 1},
    {"n": "clang build", "version2": 1},
    {"n": "simulate tcl API", "version2": 1},
    {"n": "simulate python API", "version2": 1},
    {"n": "Add a string to dictionary names to allow multiple types"},

    {"n": "List under tested commands"},
    {"n": "Track lib/exe size"},
    {"n": "LTO and non-LTO builds"},
    {"n": "File access logging"},
    {"n": "Unittest log - banner and summary"},
    {"n": "gdb-breakpoints", "version2": 1},
    {"n": "lilcxx breakpoints", "version2": 1},
    {"n": "module API", "version2": 1},
    {"n": "add simulated tcl like \"proc\"", "version2": 1},

    {"n": "add conanfile.py"},
    {"n": "add namespace: ns_push/pop/list/curr", "version2": 1},
    {"n": "error commands error_count/argErr_count/throw_count ", "version2": 1},
    {"n": "stacktrace -show_args -lineLimit n -stackLimit m", "version2": 1},
    {"n": "named if/for/while/switch/case/break/foreach/continue", "version2": 1},
    {"n": "counter for for/while/foreach", "version2": 1},
    {"n": "expanded-if: if elsif else catch break done finally name none log", "version2": 1},
    {"n": "expanded-if: reflection stats-on-run safe/call-mult-places timing", "version2": 1},
    {"n": "expanded-for: for start test next body catch break done finally name counter none log limit", "version2": 1},
    {"n": "expanded-break: break name log", "version2": 1},
    {"n": "expanded-continue: continue name log", "version2": 1},
    {"n": "expanded proc: proc name args body statics catch log", "version2": 1},
    {"n": "use Boost describe to generate new functions", "version2": 1},
    {"n": "Add config access commands", "version2": 1},
    {"n": "expanded-set: set n v exists/!exists int/float trace const reserve", "version2": 1},
    {"n": "Naming rules var/proc/ns, std::function", "version2": 1},

    {"n": "Optional tcl variable access rules", "version2": 1},
    {"n": "Strategy: keep arguments simple"},
    {"n": "Strategy: limit/organize named arguments"},
    {"n": "Strategy: limit/remove switches "},
    {"n": "command \"todo gen name\" \"todo done name\"", "version2": 1},
    {"n": "escalate command syslog/remote-syslog/email/???", "version2": 1},
    {"n": "command \"assert numErrors 0\" \"assert numArgErrors 0\"", "version2": 1},
    {"n": "assert returnsChecked", "version2": 1},
    {"n": "commands have \"embedded\" parameters", "version2": 1},
    {"n": "no-file unittest option"},

    {"n": "Turn on/off no errors strategy", "version2": 1},
    {"n": "{*} operator, \"version2\": 1"},
    {"n": "strace like", "version2": 1},
    {"n": "stackless proc", "version2": 1},
    {"n": "scoped proc", "version2": 1},

    {"n": "preprocessor", "version2": 1, "notes": [
      " /*cmt*/ ", " __LINE__ ", " __FILE__ ", " __FILE_SHORT__ ",
      " #define WORD VAL ", "#pragma require fileIO",
      "#pragma once", "#pragma preprocessor 1", "constexpr"
    ]}
  ],
  "done": [
    {"n": "Visual C++ build - DONE", "version2": 1},
    {"n": "Easy changeable namespace - DONE"},
    {"n": "test windows and other linux builds - DONE"},
    {"n": "Single file version for \"Compiler Explorer\" - DONE"},

    {"n": "Get rid of all warnings - DONE"},
    {"n": "Can turn off unittest - DONE"},
    {"n": "build.tcl works and builds various ways we want to build - DONE"},
    {"n": "add \"safe\" to commands - DONE"},
    {"n": "Top level exception handler -  DONE"},
    {"n": "namespace - DONE"},
    {"n": "valgrind - DONE"},
    {"n": "coverage - DONE"},
    {"n": "fix names - DONE"},
    {"n": "output stats - DONE"},
    {"n": "Pipe SysInfo into each new Type. - DONE"},
    {"n": "Convert series of integers into enums - DONE"},
    {"n": "Get rid of Lil_callframe.var_ and Lil_callframe.vars_.  Use iterators over varmap_ - "},

    {"n": "Get rid of for loops over LilInterp.cmdArray_ - DONE"},
    {"n": "Get rid of LilInterp.numCmds_ - DONE"},
    {"n": "Get rid of loops over LilInterp.cmdArray_ and then cmdArray_ - DONE"},
    {"n": "Convert function pointers into std::function<> - DONE"},
    {"n": "Replace LilInterp.callback_ array with dynamic std::vector of std::function<> - "},
    {"n": "Prepare for UTF16 - DONE"},
    {"n": "Prepare for replaceable strings. - DONE"},
    {"n": "Convert Lil_value to a std::string. - DONE"},
    {"n": "Up warnings on compiler - DONE"},
    {"n": "better unit-testing - DONE"},

    {"n": "More organize code - DONE"},
    {"n": "Make library - DONE"},
    {"n": "Add exception handling to where we call command function pointers. - DONE"},
    {"n": "What to do about failure to parse integers and floats. - DONE"},
    {"n": "Put SysInfo in \"thread_local\" - 1 main interp per thread.  Access via "},
    {"n": "function. - DONE"},
    {"n": "Connect sub LilInterp to main one for stats. - DONE"},
    {"n": "Deal with character types. - DONE"},
    {"n": "Fix miss matched Lil::_real_trim() delete() and Lil::_strclone() new[]. - DONE"},
    {"n": "Fix miss matched Lil::_strclone() new[] and Lil::LilInterp::setCather() delete. - DONE"},

    {"n": "Add command callback wrappers. - DONE"},
    {"n": "Review #magic - DONE"},
    {"n": "ERROR: A Lil_func_Ptr and now exists in both cmdmap_ and sysCmdMap_. - used shared "},
    {"n": "pointer - DONE"},
    {"n": "Push to github - DONE"},
    {"n": "fix asserts - DONE"},
    {"n": "destructors noexcept - DONE"},
    {"n": "Add reset to Lil_getSysInfo() - DONE"},
    {"n": "Add own exception type. - DONE"},
    {"n": "tclExpr project - DONE"},

    {"n": "numUnknownVars_ - DONE"},
    {"n": "numUnknownCmds_ - DONE"},
    {"n": "numIntegerConversions_ - DONE"},
    {"n": "numDoubleConversions_ - DONE"},
    {"n": "configure hashtables. - DONE"},
    {"n": "numArgErrrors_ - DONE"},
    {"n": "numFuncFails_ - DONE"},
    {"n": "Generate random number table - DONE"},
    {"n": "Makefile and build script - DONE (minus makefile)"},
    {"n": "thread safe - OBE"},

    {"n": "Move private code to private section. - OBE"},
    {"n": "Publish - DONE"},
    {"n": "sub interp knows parent - DONE"},
    {"n": "1st interp resets stats - DONE"},
    {"n": "mock fopen/fclose/popen/pclose/fread/fwrite - DONE"},
    {"n": "ifdef big strings - DONE", "rank": 1 },
    {"n": "logfile - DONE", "rank": 1 },
    {"n": "Rename library liblilcxx.a - DONE"},
    {"n": "Rename executable lilcxxsh - DONE"},
    {"n": "command keywords - DONE", "rank": 1},
    {"n": "List of features org/language/imp-design/src/build-pkg - DONE", "rank": 20},
    {"n": "Put git version info into binary. - DONE", "rank":  10}
  ]
}