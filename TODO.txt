- Top level exception handler -  DONE
- namespace - DONE
- valgrind - DONE
- coverage - DONE
- fix names - DONE
- output stats - DONE
- Pipe SysInfo into each new Type. - DONE
- Convert series of integers into enums - DONE
- Get rid of Lil_callframe.var_ and Lil_callframe.vars_.  Use iterators over varmap_ - DONE
- Get rid of for loops over LilInterp.cmdArray_ - DONE
- Get rid of LilInterp.numCmds_ - DONE
- Get rid of loops over LilInterp.cmdArray_ and then cmdArray_ itself. - DONE
- Convert function pointers into std::function<> - DONE
- Replace LilInterp.callback_ array with dynamic std::vector of std::function<> - DONE
- Prepare for UTF16 - DONE
- Prepare for replaceable strings. - DONE
- Convert Lil_value to a std::string. - DONE
- Up warnings on compiler - DONE
- better unit-testing - DONE
- More organize code - DONE
- Make library - DONE
- Add exception handling to where we call command function pointers. - DONE
- What to do about failure to parse integers and floats. - DONE
- Put SysInfo in "thread_local" - 1 main interp per thread.  Access via function. - DONE
- Connect sub LilInterp to main one for stats. - DONE

- Use inspectors.
- Get rid of Lil_list.listRep_ use of for loops.  Remove getCount() - 80%
- Lil_list copy ctor, assignment
- Convert Lil_list to std::list<> and change calling convention to use a std::list<> from C-array.
- Make argument error, action error, parser error, null return all distinct in commands.
- Add documentation.

- ERROR: A Lil_func_Ptr and now exists in both cmdmap_ and sysCmdMap_.
- ERROR: Copies may exist of LilInterp may exist so other references are possible.
- Review algorithms for substitutions.
- Fix miss matched Lil::_strclone() new[] and Lil::LilInterp::setCather() delete.
- Fix miss matched Lil::_real_trim() delete() and Lil::_strclone() new[].
- Fix "invalid read of size 1", ~Lil_value().
- Object cache
- configure hashtables.
- configure vectors.
- configure strings
- cache int64_t and Lil_value.
- cache double and Lil_value.
- cache Lil_list and Lil_value.
- Info fields
- Add system to associate binary/alternate representations to string representations and deal with changes.
- Push to github
- Publish
- Add dict type
- Make more like tcl ("func" => "proc" and like)
- const char* -> std::string_view
- safe mode
- less code
- better errors
- thread safe
- string class
- Move private code to private section.
- Add command callback wrappers.

- Better expr (from tcl7.6)
- Better int/double parsing (from tcl8)
- Command hlpe
- Command arg check
- Cmd error management
- C API
- Generate random number table
- Make Lil_value more string link.
- Use std::array where arrays needed.

=================== Additions
- handles interface

std::string wrapper
std::unordered_map wrapper
fake Tcl API borrow Tcl commands
    binary, env, eof, exec(***), expr, fcopy, file, fileevent, filename, flush, format, gets, glob, http,
    open, puts, read, regexp, regsub, scan, seek, socket, string, tcl_platform, tcltest, tell, time, timerate,
    clock, vmwait, zlib, sqlite
from boost
    xml, json, yaml, csv, tokenizer, python, asio, process, beast, log, circular buffer, dll, integer
from C++
    string, random, filesystem, chrono
Add limiting API
    maxNumLength, maxValueLen, maxNumArgs, maxNumProcs, maxNumCommands, maxNumValue, maxLevelStack, maxScriptSize,
    maxProcSize, maxNumLocals, maxNumLoops, maxExprSize, maxIntegerValue, minIntegerValue, maxDoubleValue, minDoubleValue
show
    cmdsAsGenerated, varsAsGenerated, varsAsWritten, procErrorReturn, missedVars, missedCommands, badConversions
    procChanges
Define base-command-set
